     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, scanf, fopen, fread, fclose, printf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll  
     9                                  import scanf msvcrt.dll
    10                                  import fopen msvcrt.dll
    11                                  import fclose msvcrt.dll
    12                                  import printf msvcrt.dll
    13                                  import fread msvcrt.dll  ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    14                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    15                                  
    16                                  ; our data is declared here (the variables needed by our program)
    17                                  segment data use32 class=data
    18                                      ; ...
    19 00000000 <res 0000000F>              fileName resb 15
    20 0000000F 257300                      scanFormat db "%s", 0
    21 00000012 7200                        accessMode db "r", 0
    22 00000014 FFFFFFFF                    file_descriptor dd -1
    23 00000018 <res 00000064>              text resb 100
    24 0000007C 54686520776F726473-         printFormat db "The words at odd position: %s", 0
    24 00000085 206174206F64642070-
    24 0000008E 6F736974696F6E3A20-
    24 00000097 257300             
    25 0000009A <res 00000064>              solution resb 100
    26                                  ; our code starts here
    27                                  segment code use32 class=code
    28                                      start:
    29                                          ; ...
    30                                          ;reads the name of the file
    31 00000000 68[00000000]                    push dword fileName
    32 00000005 68[0F000000]                    push dword scanFormat
    33 0000000A FF15[00000000]                  call [scanf]
    34 00000010 83C408                          add esp, 4 * 2
    35                                          
    36                                          ;opens the file
    37 00000013 68[12000000]                    push dword accessMode
    38 00000018 68[00000000]                    push dword fileName
    39 0000001D FF15[00000000]                  call [fopen]
    40 00000023 83C408                          add esp, 4 * 2
    41                                          
    42 00000026 83F800                          cmp eax, 0
    43 00000029 7471                            je end_of_program
    44                                          
    45 0000002B A3[14000000]                    mov [file_descriptor], eax
    46                                          
    47                                          ;reads and saves the content of the file in the variable text
    48 00000030 FF35[14000000]                  push dword [file_descriptor]
    49 00000036 6A64                            push dword 100
    50 00000038 6A01                            push dword 1
    51 0000003A 68[18000000]                    push text
    52 0000003F FF15[00000000]                  call [fread]
    53 00000045 83C410                          add esp, 4 * 4
    54                                          
    55                                          ;closes the file
    56 00000048 FF35[14000000]                  push dword [file_descriptor]
    57 0000004E FF15[00000000]                  call [fclose]
    58 00000054 83C404                          add esp, 4 * 1
    59                                          
    60                                          ;Determines the words at odd index and saves them in the solution
    61 00000057 BB00000000                      mov ebx, 0
    62 0000005C BE[18000000]                    mov esi, text
    63 00000061 BF[9A000000]                    mov edi, solution
    64                                          getOddIndexWords:
    65 00000066 AC                                  lodsb
    66 00000067 3C00                                cmp al, 0
    67 00000069 741D                                je done
    68 0000006B 83FB00                              cmp ebx, 0
    69 0000006E 7401                                je skip_saving
    70 00000070 AA                                      stosb
    71                                              skip_saving:
    72 00000071 3C20                                cmp al, " "
    73 00000073 7511                                jne skip_change
    74 00000075 83FB00                                  cmp ebx, 0
    75 00000078 7407                                    je change_to_1
    76 0000007A BB00000000                                  mov ebx, 0
    77 0000007F EB05                                        jmp skip_change_to_1
    78                                                  change_to_1:
    79 00000081 BB01000000                                  mov ebx, 1
    80                                                  skip_change_to_1:
    81                                              skip_change:
    82 00000086 EBDE                            jmp getOddIndexWords
    83                                          done:   
    84 00000088 AA                                  stosb
    85                                          ;Prints the solution to the screen
    86 00000089 68[9A000000]                    push solution
    87 0000008E 68[7C000000]                    push printFormat
    88 00000093 FF15[00000000]                  call [printf]
    89 00000099 83C408                          add esp, 4 * 2
    90                                          end_of_program:
    91                                          ; exit(0)
    92 0000009C 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    93 0000009E FF15[00000000]                  call    [exit]       ; call exit to terminate the program
