     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, printf, scanf               ; tell nasm that exit exists even if we won't be defining it
     8                                  extern prime
     9                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    10                                  import printf msvcrt.dll
    11                                  import scanf msvcrt.dll
    12                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    13                                  
    14                                  ; our data is declared here (the variables needed by our program)
    15                                  segment data use32 class=data
    16                                      ; ...
    17 00000000 256400                      format db "%d", 0
    18 00000003 546865207072696D65-         message db "The prime numbers: ", 0
    18 0000000C 206E756D626572733A-
    18 00000015 2000               
    19 00000017 454358203D20256420-         errorMessage db "ECX = %d ", 0
    19 00000020 00                 
    20 00000021 25642000                    littleMessage db "%d " , 0
    21 00000025 00000000                    n dd 0
    22 00000029 00000000                    valueOfEcx dd 0
    23 0000002D 00000000                    list dd 0
    24                                  ; our code starts here
    25                                  segment code use32 public class=code
    26                                      start:
    27                                          ; ...
    28                                          
    29 00000000 68[03000000]                    push message
    30 00000005 FF15[00000000]                  call [printf]
    31 0000000B 83C404                          add esp, 4
    32                                          
    33 0000000E 68[25000000]                    push dword n
    34 00000013 68[00000000]                    push dword format
    35 00000018 FF15[00000000]                  call [scanf]
    36 0000001E 83C408                          add esp, 4 * 2
    37                                          
    38 00000021 8B0D[25000000]                  mov ecx, [n]
    39 00000027 83F900                          cmp ecx, 0
    40 0000002A 744B                            je ending
    41 0000002C BF[2D000000]                    mov edi, list
    42                                      
    43                                          reading:
    44 00000031 51                                  push ecx
    45                                              
    46 00000032 57                                  push dword edi
    47 00000033 68[00000000]                        push dword format
    48 00000038 FF15[00000000]                      call [scanf]
    49 0000003E 83C408                              add esp, 4 * 2
    50                                              
    51 00000041 83C704                              add edi, 4
    52                                              
    53 00000044 59                                  pop ecx
    54 00000045 E2EA                            loop reading
    55                                          
    56 00000047 68[03000000]                    push message
    57 0000004C FF15[00000000]                  call [printf]
    58 00000052 83C404                          add esp, 4
    59                                          
    60 00000055 8B0D[25000000]                  mov ecx, [n]
    61 0000005B E31A                            jecxz ending
    62 0000005D BE[2D000000]                    mov esi, list
    63                                          
    64                                          writing:
    65 00000062 AD                                  lodsd
    66                                              
    67 00000063 890D[29000000]                      mov [valueOfEcx], ecx
    68                                              
    69 00000069 50                                  push dword eax
    70 0000006A E8(00000000)                        call prime
    71                                              
    72 0000006F 8B0D[29000000]                      mov ecx, [valueOfEcx]
    73 00000075 E2EB                            loop writing
    74                                          ending:
    75                                          ; exit(0)
    76 00000077 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    77 00000079 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
